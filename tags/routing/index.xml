<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>routing on jq1.io</title>
    <link>https://jq1.io/tags/routing/</link>
    <description>Recent content in routing on jq1.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 11 Oct 2022 08:11:58 -0600</lastBuildDate><atom:link href="https://jq1.io/tags/routing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>$init super refactor</title>
      <link>https://jq1.io/posts/init_super_refactor/</link>
      <pubDate>Tue, 11 Oct 2022 08:11:58 -0600</pubDate>
      
      <guid>https://jq1.io/posts/init_super_refactor/</guid>
      <description>Aaaand we&amp;rsquo;re back with another heavy hitting round of super refactorization in Terraform!
I think the first iteration of Super Router for AWS went well.
It allowed us to peer and route both intra-region and cross-region TGWs and VPCs with a single module.
But there was one really annoying flaw.
The caveat in the design is that the peer TGWs will have to go through the Super Router&amp;rsquo;s local provider region to get to other peer TGWs.</description>
    </item>
    
    <item>
      <title>Super Powered, Super Sharp, Super Router!</title>
      <link>https://jq1.io/posts/super_router/</link>
      <pubDate>Sat, 13 Aug 2022 16:07:10 -0600</pubDate>
      
      <guid>https://jq1.io/posts/super_router/</guid>
      <description>What&amp;rsquo;s up world?!
Welcome back for moar spicy cloud networking Terraform takes because we servin&amp;rsquo; them HOT over here so let&amp;rsquo;s dig in!
This is a follow up to the generating routes blog post.
TNT Architecture Recap The Terraform Networking Trifecta project demonstrated the ability to &amp;ldquo;scale&amp;rdquo; AWS VPCs in Terraform code by adding VPC objects to a list.
Example VPC architecture but with ephemeral subnets: With Tiered VPCs we can narrow down the context (ie app, cicd, general) and maximize the use of smaller network sizes.</description>
    </item>
    
    <item>
      <title>Building a generate routes function using Terraform test</title>
      <link>https://jq1.io/posts/generating_routes/</link>
      <pubDate>Sat, 05 Mar 2022 16:59:00 -0700</pubDate>
      
      <guid>https://jq1.io/posts/generating_routes/</guid>
      <description>Welcome to the next episode of thinking out loud to route in the cloud, you know my steez!
Earlier this season we abstracted a TGW Centralized Router.
Part of it&amp;rsquo;s responsibility is to manage routes between Tiered VPCs within a single region.
It will create routes to other VPC networks in private and public route tables for each VPC (except itself).
# snippet variable &amp;#34;vpcs&amp;#34; { type = map(object({ network = string az_to_private_route_table_id = map(string) az_to_public_route_table_id = map(string) })) } locals { # { vpc-1-network =&amp;gt; [ &amp;#34;vpc-1-private-rtb-id-1&amp;#34;, &amp;#34;vpc-1-public-rtb-id-1&amp;#34;, .</description>
    </item>
    
    <item>
      <title>Terraform Networking Trifecta</title>
      <link>https://jq1.io/posts/tnt/</link>
      <pubDate>Thu, 22 Jul 2021 20:11:22 -0600</pubDate>
      
      <guid>https://jq1.io/posts/tnt/</guid>
      <description>Intro Initially I&amp;rsquo;d planned to blog more than just about Terraform but it hasn&amp;rsquo;t turned out that way due to lack of time.
But that&amp;rsquo;s OK because I really do enjoy creating and writing about networking topics with Terraform in the cloud.
Content generation is hard so hats off to those who are consistently generating it.
This project is for all the Terraform headz building networks in the cloud!
It&amp;rsquo;s building on my previous Tiered VPC idea but by adding a couple more abstractions we can build flexible networking between multiple AWS VPCs with minimal code.</description>
    </item>
    
  </channel>
</rss>
