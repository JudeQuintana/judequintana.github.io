<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>local-testing on jq1.io</title>
    <link>https://jq1.io/tags/local-testing/</link>
    <description>Recent content in local-testing on jq1.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sat, 05 Mar 2022 16:59:00 -0700</lastBuildDate>
    <atom:link href="https://jq1.io/tags/local-testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Building a generate routes function using Terraform test</title>
      <link>https://jq1.io/posts/generating_routes/</link>
      <pubDate>Sat, 05 Mar 2022 16:59:00 -0700</pubDate>
      <guid>https://jq1.io/posts/generating_routes/</guid>
      <description>Welcome to the next episode of thinking out loud to route in the cloud, you know my steez!
Earlier this season we abstracted a TGW Centralized Router.
Part of it&amp;rsquo;s responsibility is to manage routes between Tiered VPCs within a single region.
It will create routes to other VPC networks in private and public route tables for each VPC (except itself).
# snippet variable &amp;#34;vpcs&amp;#34; { type = map(object({ network = string az_to_private_route_table_id = map(string) az_to_public_route_table_id = map(string) })) } locals { # { vpc-1-network =&amp;gt; [ &amp;#34;vpc-1-private-rtb-id-1&amp;#34;, &amp;#34;vpc-1-public-rtb-id-1&amp;#34;, .</description>
    </item>
    <item>
      <title>Hash Server 9000 in Go</title>
      <link>https://jq1.io/posts/hash_server_9000/</link>
      <pubDate>Sat, 10 Oct 2020 11:38:15 -0600</pubDate>
      <guid>https://jq1.io/posts/hash_server_9000/</guid>
      <description>I took an internal dev challenge at work a while back because I wanted to learn more Go since I have an OO background and was not familiar with the procedural way of thinking. The goal was to build a simple non-persistent password hashing service using only the standard library while demonstrating the use of concurrency with the endpoint requirements below.
Reading the blue and white book was definitely key to gaining deeper insight.</description>
    </item>
    <item>
      <title>Go Modules Replace Use Case: Terratest and LocalStack</title>
      <link>https://jq1.io/posts/go_mod_terratest_localstack/</link>
      <pubDate>Wed, 23 Sep 2020 22:35:36 -0600</pubDate>
      <guid>https://jq1.io/posts/go_mod_terratest_localstack/</guid>
      <description>At work we&amp;rsquo;re planning on having our IaC to grow up a bit. We&amp;rsquo;re really wanting it to get a job and start contributing more around here. Something like a shiny new Terraform Pipeline would be nice. That means we need to get our Terraform testing sorted out.
I came across this HashiCorp video called Testing Infrastructure as Code on Localhost where Samuel Kihahu talks about combining Terratest + Terraform + LocalStack to allow him to test Terraform modules locally.</description>
    </item>
  </channel>
</rss>
